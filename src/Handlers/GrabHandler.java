package Handlers;

import GameObjects.Box;
import Inventories.DataAccessPoint;
import Tools.CVector;
import Tools.Coordinate;

/**
 * @author Laszlo
 * @version 1.0
 */
public class GrabHandler {

	// Adatt√°rol√≥
	private DataAccessPoint data;

	/**
	 * Konstruktor
	 *
	 * @param data Adatt√°rol√≥
	 */
	public GrabHandler(DataAccessPoint data){
		this.data = data;
	}

	/**
	 * Doboz felv√©tele
	 * @param interactfrom J√°t√©kos helye a felv√©telkor
	 */
	public Box Grab(CVector interactfrom) {

		// A felvenni k√≠v√°nt doboz poz√≠ci√≥ja
		Coordinate checkedPos = interactfrom.toNextCoord();

		// Csillagkapun kereszt√ºli dobozfelv√©tel lehet√∂v√© t√©tele
		if(data.stargates.IsThere(interactfrom.toNextCoord())){
            checkedPos = data.stargates.StepIn(interactfrom.toNextCoord());
		}

		// Van doboz a kiszemelt poz√≠ci√≥n?
		if(data.boxes.IsThere(checkedPos)){
            Box returnBox;

			// Felvett doboz
			returnBox =  data.boxes.GetBox(checkedPos);

			if (returnBox != null){
				System.out.print("has grabbed an item at " + checkedPos.GetX() + "," + checkedPos.GetY() + " ");
			}

			// Gomb felenged√©s kezel√©se
			data.buttons.EventOn(checkedPos, data.boxes.isThereV2(checkedPos));

			return returnBox;
        }
		System.out.print("canít interact at: " + checkedPos.GetX() + "," + checkedPos.GetY() + " ");
        return null;
	}
	
	/**
	 * Rakhat√≥-e a kijel√∂lt poz√≠ci√≥ra doboz.
	 * @param interactfrom bel√©p√©s ir√°nya
	 */
	private boolean CanPut(Tools.CVector interactfrom) {
		if(data.fields.GetFieldObject(interactfrom).Steppable()){
//			if(!data.boxes.IsThere(interactfrom)){
				if(!data.collectables.IsThere(interactfrom)){
					return true;
//				}
			}
		}
		return false;
	}

	/**
	 * Dobozlerak√°s
	 * @param interactfrom J√°t√©kos helye a felv√©telkor.
	 * @param carriedobject J√°t√©kos kez√©ben l√©v√∂ doboz.
	 */
	public boolean Put(CVector interactfrom, Box carriedobject) {

		// A koordin√°ta, melyre a j√°t√©kos a dobozt tenni szeretn√©.
		CVector checkedPos = interactfrom.toNextCoord();

		// Csillagkapun kereszt√ºli dobozlet√©tel.
		if(data.stargates.IsThere(checkedPos)){
			checkedPos = data.stargates.StepIn(checkedPos);
		}

		// Rakhat√≥-e a kiszemelt koordin√°t√°j√∫ pontra doboz?
		if(CanPut(checkedPos)){
			data.boxes.PutBox(checkedPos, carriedobject);

			System.out.print("has put an item at " + checkedPos.GetX() + "," + checkedPos.GetY() + " ");

			// Szakad√©kba dob√°s eset√©n a doboz semmis√ºlj√∂n meg.
			if(data.fields.GetFieldObject(checkedPos).IsMortal()){
				System.out.println("box destroyed ");
				data.boxes.Delete(checkedPos);
			}


			// Ajt√≥nyit√°s kezel√©se
			data.buttons.EventOn(checkedPos,data.boxes.isThereV2(checkedPos));

			return true;
		} else {
			System.out.println("can't interact at " + checkedPos.GetX() + "," + checkedPos.GetY() + " ");
			return false;
		}
	}

}